name: AWS git fetch
on:
  push:
    branches: ['master']

jobs:
  run_in_EC2:
    runs-on: ubuntu-latest
    #environment: Test_Paiky_Environment #$ Optionally, create  a github environment to avoid duplicating secrets across repositories.
    steps:
      # - name: ENV TEST
      #   run: echo "$REPO_PATH" && echo "$REPO_NAME"
      - name: "Print host"
        run: echo "${{secrets.EC2_USER}}" && echo "${{secrets.EC2_HOST}}"
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{secrets.EC2_HOST}} #$ for SSH, don't include port unless not using :22 . Example: 132.84.129.77.
          username: ${{secrets.EC2_USER}}
          key: ${{secrets.EC2_SSH_PRIVATE_KEY}}
          passphrase: ${{ secrets.EC2_SSH_PRIVATE_KEY_PASSPHRASE }} #$ Only if required.

          script: |
            #* Declaring variables for EC2 (it doesn't have access to "env")
            UNIQUE_APP_NAME="${{secrets.UNIQUE_APP_NAME}}"
            #! If you are using Docker COMPOSE,  you don't need a unique app name for the image name. However, you still need a unique directory name.
            REPO_PATH="{{github.repository}}" #$ Example: # gives "dev-miguel/repo-name". We will use this to clone the repo initially. 
            DOCKER_PORT="${{ secrets.DOCKER_PORTS }}"  #! I know it's not being used here

            cd ~/vsCodeMain
            #* If the is no desired-folder with .git, it means the repo doesn't exist so we clone it INTO A DESIRED FOLDER NAME.
            [-d "UNIQUE_APP_NAME/.git"] || git clone git@github.com:$REPO_PATH.git "UNIQUE_APP_NAME" #!You need to use a key that DOESN'T USE A PASSPHRASE.
            cd "$UNIQUE_APP_NAME"
            git fetch origin
            git merge origin/master
            echo "PORT=3002" >> ./config/shared.env #$ will create shared.env automatically as long as the ./config directory already exists.
            echo "JWT_SECRET=${{secrets.JWT_SECRET}}" >> ./config/shared.env

            #* Build and Run Docker
            #$ Docker compose works directory-wise, so this is safe as long as we are in the correct directory. No need for a unique image name.

            sudo docker compose down
            sudo docker compose up --build --abort-on-container-exit --exit-code-from test test/ #* This will cause the GitHub Action to fail if the Test fails. Notice how we are not using "-d". We DO NEED to use -d below

            sudo docker compose up --build -d




