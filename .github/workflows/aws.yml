name: AWS git fetch
on:
  push:
    branches: ['master']

jobs:
  run_in_EC2:
    runs-on: ubuntu-latest
    #environment: Test_Paiky_Environment #$ Optionally, create  a github environment to avoid duplicating secrets across repositories.
    steps:
      # - name: ENV TEST
      #   run: echo "$REPO_PATH" && echo "$REPO_NAME"

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{vars.PAID_CLOUD_HOST}} 
          username: ${{secrets.HETZNER_USER}} #* Currently hosted on Hetzner
          key: ${{secrets.HETZNER_SSH_PRIVATE_KEY}} #* 
          passphrase: ${{ secrets.PRIVATE_KEY_PASSPHRASE }} #$ Only if required.


          script: |
            #* Declaring variables for EC2 (it doesn't have access to "env")

            UNIQUE_APP_NAME="${{ secrets.UNIQUE_APP_NAME }}"  #! UNIQUE_APP_NAME must be all lowercase and without underscores for Docker to accept it.
            #! UNIQUE_APP_NAME must be set per-repository
            #! If you are using Docker COMPOSE,  you don't need a unique app name for the image name. However, you still need a unique directory name.
            REPO_PATH="${{ github.repository }}"  #$ Example: # gives "dev-miguel/repo-name". We will use this to clone the repo initially. 
            DOCKER_PORT="${{ secrets.DOCKER_PORTS }}"  #! I know it's not being used here

            cd ~/vsCodeMain
            #* If the is no desired-folder with .git, it means the repo doesn't exist so we clone it INTO A DESIRED FOLDER NAME.
            [ -d "$UNIQUE_APP_NAME/.git" ] || git clone git@github.com:$REPO_PATH.git "$UNIQUE_APP_NAME" #! AWS needs  need to use an SSH key of your github account that DOESN'T USE A PASSPHRASE in order to clone.
            cd "$UNIQUE_APP_NAME" 
            git fetch origin 
            git merge origin/master

            rm ./config/shared.env || true #* Delete previous environment variables for safety
            #* Write secrets into ./config/shared.env
            echo "JWT_SECRET=${{secrets.JWT_SECRET}}" >> ./config/shared.env
            #! JWT_SECRET must be set per-repository




            #* Build and Run Docker
            #$ Docker compose works directory-wise, so this is safe as long as we are in the correct directory. No need for a unique image name.
            sudo docker compose down
            sudo docker compose up --build --abort-on-container-exit --exit-code-from test test #* This will cause the GitHub Action to fail if the Test fails. Notice how we are not using "-d". We DO NEED to use -d below

            #* Handling docker-test errors
            EXIT_CODE=$? #$ This captures the exit code of the last command.
            if [ $EXIT_CODE -ne 0 ]; then #$ "-ne" means "not equal"
              echo "Test container failed with exit code $EXIT_CODE"
              exit $EXIT_CODE #$ This exits the ENTIRE GitHub Action with the same exit code.
            fi


            sudo docker compose up --build -d db backend #$ Specify services to avoid running tests again.
           